#Native Approch optimal code is given ater this 
'''
Author @ Shubhanshu Jain
'''
        

def solve():
    
    test = int(input());
    
    while(test):
        test-=1;
        
        n,k = map(int,input().split());
        ls = list(map(int,input().split()));
        ans = -1
        flag = 1
        
        for i in range(n):
            ss = str(abs(ls[i]));
            ls[i] *= len(ss); 
        
        for i in range(n-k+1):
            x = ls[i:i+k];
            m = max(x);
            s = sum(x);
            if(m==x[0] and (ans<s or flag)):
                
                flag = 0
                ans = s
        if flag:
            print(-1)
        else:
            
            print(ans)
solve()



#Optimal code in cpp, upload python code soon 


#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
 
#define ff              first
#define ss              second
#define int             long long
#define double          long double
#define pb              push_back
#define mp              make_pair
#define pi              pair<int,int>
#define vtiii           vector<tuple<int,int,int>>
#define vi              vector<int>
#define vpii            vector<pair<int,int>>
#define mii             map<int,int>
#define pqb             priority_queue<int>
#define pqs             priority_queue<int,vi,greater<int>>
#define setbits(x)      __builtin_popcountll(x)
#define zrobits(x)      __builtin_ctzll(x)
#define inf             LLONG_MAX
#define ps(x,y)         fixed<<setprecision(y)<<x
#define mk(arr,n,type)  type *arr=new type[n];
#define all(x) (x).begin(), (x).end()
#define w(x)            int x; cin>>x; while(x--)
#define FIO             ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0) 
mt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());
 
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;
const int mod =  1e9 + 7;
const int mxN = 1e5 + 5;

int cd(int x){
    if(x<0) x*=-1ll;
    int c = 0;
    while(x){
        ++c;
        x/=10;
    }
    return c;
}

void solve(){    
    int n,k;cin>>n>>k; multiset<int> s;
    vi v(n);for(int i=0;i<n;++i){
        cin>>v[i];
        v[i]*=cd(v[i]);
    }
    int cur_sum=0 , ans = -1ll * inf;
    for(int i=0;i<k;++i){
        cur_sum += v[i];
        s.insert(v[i]);
    }
    if(v[0] == *prev(s.end())) ans = cur_sum;
    for(int i=k;i<n;++i){
        cur_sum-=v[i-k];
        s.erase(s.find(v[i-k]));
        cur_sum+=v[i];
        s.insert(v[i]);
        if(v[i-k+1] == *prev(s.end())) ans = max(cur_sum,ans);
    }
    cout<<(ans==-9223372036854775807 ? -1 : ans)<<endl;
}
 
int32_t main(){
    // #ifndef ONLINE_JUDGE
    //     freopen("input.in", "r", stdin);
    //     freopen("output.in", "w", stdout);
    // #endif
    FIO;
    w(x)
    solve();
    return 0;
}
